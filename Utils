package com.github.enokiy;

import com.goide.psi.*;
import com.goide.psi.impl.GoTypeUtil;
import com.google.gson.GsonBuilder;
import com.intellij.psi.PsiElement;

import java.time.LocalDateTime;
import java.time.LocalTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * Created on 2021-08-28
 *
 * @author: enokiy
 */
public class Utils {

    private static final Map<String, Object> basicTypes = new HashMap<>();

    static {
        basicTypes.put("bool", false);
        basicTypes.put("byte", 0);
        basicTypes.put("int", 0);
        basicTypes.put("uint", 0);
        basicTypes.put("uint8", 255);
        basicTypes.put("uint16", 65535);
        basicTypes.put("uint32", 4294967295L);
        basicTypes.put("uint64", 1844674407370955161L);
        basicTypes.put("int8", -128);
        basicTypes.put("int16", -32768);
        basicTypes.put("int32", -2147483648);
        basicTypes.put("int64", -9223372036854775808L);
        basicTypes.put("uintptr", 0); //uintptr is an integer type that is large enough to hold the bit pattern of any pointer
        basicTypes.put("rune", 0);  // rune is an alias for int32 and is equivalent to int32 in all ways
        basicTypes.put("long", 0L);
        basicTypes.put("float32", 0.0F);
        basicTypes.put("float64", 0.0F);
        basicTypes.put("string", "demoString");
        basicTypes.put("time.Time", LocalDateTime.now().toString());
    }

    public static boolean isBasicType(String typeName) {
        return basicTypes.containsKey(typeName);
    }

    public static String convertGoStructToJson(GoStructType goStructType) {

        Map<String, Object> map = getKVMap(goStructType);
        return new GsonBuilder().setPrettyPrinting().create().toJson(map);
    }

    /*
    // The encoding of each struct field can be customized by the format string
    // stored under the "json" key in the struct field's tag.
    // As a special case, if the field tag is "-", the field is always omitted.
    //
    //  Field int `json:"myName"` -->Field appears in JSON as key "myName".
    //  Field int `json:"myName,omitempty"` -->Field appears in JSON as key "myName" and the field is omitted from the object if its value is empty,
    //   Field int `json:"-"`    -->  Field is ignored by this package
    //   Field int `json:"-"`    --> Field is ignored by this package.
    //   Field int `json:"-,"`   --> Field appears in JSON as key "-".
     */
    private static String getJsonKeyName(String fieldName, String tagText) {
        String jsonKey = fieldName;
        if (tagText == null || tagText == "") {
            return jsonKey;
        }
        String regPattern = "json:\"([\\w\\d_,]+)\"";
        Pattern pattern = Pattern.compile(regPattern);
        Matcher matcher = pattern.matcher(tagText);
        if (matcher.find()) {
            String tmpKeyName = matcher.group(1).split(",")[0];
            if (tmpKeyName != "-") { // for now,don't omit any field
                jsonKey = tmpKeyName;
            }
        }
        return jsonKey;
    }

    private static Map<String, Object> getKVMap(GoStructType goStructType) {
        Map<String, Object> map = new HashMap<>();

        List<GoFieldDeclaration> fieldsDeclareList = goStructType.getFieldDeclarationList();

        for (GoFieldDeclaration field : fieldsDeclareList) {
            String fieldName = field.getFieldDefinitionList().get(0).getIdentifier().getText();
            String fieldTagText = field.getTagText();
            String jsonKey = getJsonKeyName(fieldName, fieldTagText);
            GoType fieldType = field.getType();
            String fieldTypeStr = field.getType().getTypeReferenceExpression() == null ? "NOTBASICTYPE" : field.getType().getTypeReferenceExpression().getText();

            if (isBasicType(fieldTypeStr)) {
                map.put(jsonKey, basicTypes.get(fieldTypeStr));
            } else if (fieldType instanceof GoMapType) {
                Map<String, Object> tmpMap = new HashMap<>();
                GoTypeReferenceExpression typeRef = fieldType.getTypeReferenceExpression();
                PsiElement resolve = typeRef != null ? typeRef.resolve() : null;
                if (resolve instanceof GoTypeSpec) {
                    GoTypeSpec typeSpec = (GoTypeSpec)resolve;
                    GoType type = typeSpec.getSpecType().getType();
                    if (type instanceof GoStructType) {
                        tmpMap = getKVMap((GoStructType)type);
                    }
                }
                map.put(jsonKey, tmpMap);
            } else if (fieldType instanceof GoArrayOrSliceType) {
                List tmpList = new ArrayList();
                map.put(jsonKey, tmpList);
            }else{
                // todo other types
                map.put(jsonKey, new HashMap<>());
            }
        }
        return map;
    }
}
